%namne:     ch02.Rnw
%author:    Charles CarterG
%date:      August 4, 2016

\chapter{Computer-Assisted Analysis}
\label{ch02}

    Why do we need computer assisted analysis? In order to answer this question, we need to consider both what a computer does, and what a programer does.

    A computer computes, or more elegantly, a computer is just a computational machine, but an immensely powerful one. To illustrate its power, assume that we have in our employ a number of super mathematicians. Assume that one mathematician can perform one computation a second, 60 computations a minute, 60 minutes an hour, for 2000 hours a year, and that our mathematician is never tired, sick, in meetings, or needs professional time. How many computations can our mathematician do in a year?

    <<ch01-pre, cache=TRUE>>=
        #computations per second
        number.of.computations <- 1 
        #computations per minute
        number.of.computations <- number.of.computations * 60 
        #computations per hour
        number.of.computations <- number.of.computations * 60 
        #computations per year
        number.of.computations <- number.of.computations * 2000 
        # our mathematician is good for
        number.of.computations
    @

    Now, let's say that our computer is just an ordinary machine, nothing special, and that the processor runs at a clock speed of 2 gHz, or two billion computations a second. How many mathamaticians do we need to equal the speed of one ordinary computer?

    <<ch01-pre-b, cache=TRUE>>=
        number.of.mathematicians <- 2000000000 / number.of.computations
        number.of.mathematicians
    @

    As you can see, it takes \Sexpr{number.of.mathematicians} mathematicians working for a year to perform the same number of computations that a computer can do in one second! This is amazing power, and leads us to the second question, what does a programmer do? What a programmer does is \ldots{} think. A computer is dumb, all it knows how to do is compute. A human, otherwise known as a programmer, tells the computer what to compute. Currently, we have at our fingertips incredible amounts of data. Ordinary computers have storage capacity of 100 gigabytes, and storage capacities of 1000 gigabytes are relatively common. Research computers can store terabytes ($10^{12}$ bytes), petabytes ($10^{15}$ bytes), and exabytes ($10^{18}$ bytes) of data. For these amounts of data, computer assisted analysis is an absolute prerequisite.

    This chapter introduces the \R{} programming language, perhaps the most widely used computer assisted analytical software in the world.

    \paragraph{Exercise:} Name two or three commonly used technologies for data analytics.

    \section{The \R{} programming language}
    \label{the R programming language}

        \subsection{Invoking and quitting \R{}}
        \label{Invoking and quitting}

        This chapter assumes that you have \R{} up and running. If you do not, please read appendix \ref{installing} on page \pageref{installing}. Details of invocation differ according to the operating system you use. This tutorial assumes that you use some current version of Microsoft Windows. If you have a shortcut on our desktop, you invoke \R{} by opening the shortcut. You can also invoke \R{} via the start menu. If you choose to use an integrated development (IDE), you invoke \R{} by opening your IDE, see appendix \ref{IDEs} on page \pageref{IDEs}. If you open \R{} program on Windows, you will see the \R{} graphical user interface (GUI), a bare bones command interpreter, shown in figure \ref{ch02sec01a}. It's also possible to invoke \R{} on the command line interface (the DOS or Powershell prompt), but we will not cover this. 

        \begin{figure}
            \includegraphics[width=4.5in]{images/ch02sec01a.pdf}
            \caption{\R{} GUI}
            \label{ch02sec01a}
        \end{figure}

        You quit \R{} by typing the command \texttt{q()} at the \R{} prompt. You will see an alert box asking you whether you wish to save. You should always save your image unless you have a good reason not to. See figure \ref{ch02sec01b}. You may also give the command \texttt{q('yes')} to directly save the image, or \texttt{q('no')} to quit without saving the image. On Windows, if you save the image, \R}{} creates a file in your working directory named \texttt{.RData}. You can invoke \R{} by clicking on this link in the normal fashion, and your previous workspace will be restored. See figure \ref{ch02sec01c}.

    \paragraph{Exercise:} Invoke \R{} in the usual manner, then quit \R{} saving the workspace, and invoke \R{} by clicking on the \texttt{.RData} file icon.
    
        \begin{figure}
            \includegraphics[width=1.5in]{images/ch02sec01b.pdf}
            \caption{\R{} quit alert}
            \label{ch02sec01b}
        \end{figure}

        \begin{figure}
            \includegraphics[width=2.7in]{images/ch02sec01c.pdf}
            \caption{\R.data file}
            \label{ch02sec01c}
        \end{figure}


        \subsection{Directory and file operations}
        \label{Directory and file operations}

        We will begin a tour of \R{} with directory and file operations. These allow you to use \R{} as a command shell, which may come in handy occasionally, however, you will mostly use your operating system's file and directory manipulation facilities. Here are the commands you should run.

        \begin{lstlisting}
#get help for getwd()
?getwd
#list the current working directory
getwd()
#create a new child directory named 'testing'
dir.create("testing")
#change to the testing child directory
setwd("testing")
#create a numeric vector
num.vec <- c(1,2,3,4,5)
#print the num.vec
num.vec
#save the vector as a CSV file
write.csv(num.vec, "my-num-vec.csv")
#copy the file
file.copy("my-num-vec.csv", "another-num-vec.csv")
#list the directory contents
dir()
#delete the files you just created
file.remove("my-num-vec.csv")
file.remove("another-num-vec.csv")
#check to see if it's still there
dir()
#return to the parent directory
setwd("..")
#see what unlink does
?unlink
#remove the testing directory
unlink("testing")
#is it still there?
dir("testing")
        \end{lstlisting}

Let's see how this works.

<<file-and-dir-manip, cache=TRUE>>=
#list the current working directory
getwd()
#create a new child directory named 'testing'
dir.create("testing")
#change to the testing child directory
setwd("testing")
#create a numeric vector
num.vec <- c(1,2,3,4,5)
#print the num.vec
num.vec
#save the vector as a CSV file
write.csv(num.vec, "my-num-vec.csv")
#copy the file
file.copy("my-num-vec.csv", "another-num-vec.csv")
#list the directory contents
dir()
#delete the files you just created
file.remove("my-num-vec.csv")
file.remove("another-num-vec.csv")
#check to see if it's still there
dir()
#return to the parent directory
setwd("..")
#remove the testing directory
unlink("testing")
#is it still there?
dir("testing")
@
        \subsection{Data structures and types}
        \label{Data structures and types}

        \R{} has a number of different data structures, including vectors, matrices, lists, and data frame. We will mostly be using data frames for statistical and analytical work, but it's worthwhile to have some sort of idea for the other kinds of dta structures. Run the code in this listing.

        \begin{lstlisting}
#create a vector with four integers named 'a'
a <- c(1,2,3,4)
#create a vector with four integers named 'b'
b <- c(5,6,7,8)
#create a vector by listwise multiplication named 'c'
c <- a * b
#look at a, b, and c
a
b
c
#create a matrix named 'm' by row
m <- matrix(data = c(a, b, c), nrow = 3, byrow = TRUE)
m
#create a matrix named 'n' by column
n <- matrix(data = c(a, b, c), ncol = 3, byrow = FALSE)
n
#create three lists named 'd', 'e', 'f' and 'g'
d <- list("Washington", "Adams", "Jefferson", "Madison")
e <- list(1,2,3,4)
f <- list(1788, 1796, 1800, 1808)
#from Virginia?
g <- list(TRUE, FALSE, TRUE, TRUE)
#create a dataframe named 'presidents'
presidents <- data.frame(cbind(e, d, f, g), stringsAsFactors = FALSE)
names(presidents) <- c("order", "name", "year", "from.virginia?")
presidents
        \end{lstlisting}

Let's see how this works.

<<data-structures, cache=TRUE>>=
#create a vector with four integers named 'a'
a <- c(1,2,3,4)
#create a vector with four integers named 'b'
b <- c(5,6,7,8)
#create a vector by listwise multiplication named 'c'
c <- a * b
#look at a, b, and c
a
b
c
#create a matrix named 'm' by row
m <- matrix(data = c(a, b, c), nrow = 3, byrow = TRUE)
m
#create a matrix named 'n' by column
n <- matrix(data = c(a, b, c), ncol = 3, byrow = FALSE)
n
#create three lists named 'd', 'e', 'f' and 'g'
d <- list("Washington", "Adams", "Jefferson", "Madison")
e <- list(1,2,3,4)
f <- list(1788, 1796, 1800, 1808)
#from Virginia?
g <- list(TRUE, FALSE, TRUE, TRUE)
#create a dataframe named 'presidents'
presidents <- data.frame(cbind(e, d, f, g), stringsAsFactors = FALSE)
names(presidents) <- c("order", "name", "year", "from.virginia?")
presidents
@

    As a programming language, \R{} has the usual types: integers, floats, doubles, strings, Booleans, etc. \R{} contains no surprises here. However, there is one ``data type'' that may cause come confusion, \textit{factors}. Factors can be any data type, but they are most frequently strings, such as ``male'' and ``female.'' Factors are categorical variables that correspond to levels in a study. We will look at two factors next, one consisting of strings, and the other consisting of ``integers.''

    \begin{lstlisting}
#create a string vector
sex <- c("Male", "Female", "Male", "Female", "Female", "Female", 
    "Male", "Male", "Male", "Female", "Female", "Male", "Female", 
    "Male", "Female", "Male")
#look at it
sex
#convert it to a factor
sex.fac <- factor(sex, levels = c("Male","Female"))
#look at the factor
sex.fac
#how many of each level?
table(sex.fac)
#crete an ``integer'' vector
zips <- c(31901, 31906, 31901, 31909, 31907, 31907, 31909, 
    31901, 31906, 31906, 31907, 31909, 31901)
#look at zips
zips
#convert zips to a factor
zips.fac <- factor(zips, levels = c(31901, 31906, 31909, 
    31907), labels=c("Downtown", "Wynnton", "CPS", 
    "Lindsey Creek"))
#lool at the zips.fac
zips.fac
#see how many of each exist
table(zips.fac)
    \end{lstlisting}

    Let's see what happens when we run this.

    <<factors, cache=TRUE>>=
    #create a string vector
    sex <- c("Male", "Female", "Male", "Female", "Female", "Female", 
        "Male", "Male", "Male", "Female", "Female", "Male", "Female", 
        "Male", "Female", "Male")
    #look at it
    sex
    #convert it to a factor
    sex.fac <- factor(sex, levels = c("Male","Female"))
    #look at the factor
    sex.fac
    #how many of each level?
    table(sex.fac)
    #crete an ``integer'' vector
    zips <- c(31901, 31906, 31901, 31909, 31907, 31907, 31909, 
        31901, 31906, 31906, 31907, 31909, 31901)
    #look at zips
    zips
    #convert zips to a factor
    zips.fac <- factor(zips, levels = c(31901, 31906, 31909, 
        31907), labels=c("Downtown", "Wynnton", "CPS", 
        "Lindsey Creek"))
    #lool at the zips.fac
    zips.fac
    #see how many of each exist
    table(zips.fac)
    @

    \section{\R{} packages}
    \label{R packages}

        As an open technology, the \R{} language is available for anyone to examine, copy, and change. An important benefit is that anyone can contribute to \R{}, and many people have. These contributions are collected into \textit{packages} and made available for everyone, with no strings attached. Popular repositories for \R{} packages include Bioconductor,\footnote{Bioconductor provides tools for the analysis and comprehension of high-throughput genomic data. Bioconductor uses the R statistical programming language, and is open source and open development. It has two releases each year, 1211 software packages, and an active user community.}, GitHub,\footnote{GitHub contains projects in a great number of languages, \R{} included. In a way, it is a social networking site for people who write software.}, and the Comprehensive \R{} Archive Network. In this section we will take a look at CRAN and look at three popular packages.

        \subsection{CRAN}
        \label{CRAN}


        \subsection{knitr}
        \label{knitr}


        \subsection{ggplot2}
        \label{ggplot2}


        \subsection{dplyr}
        \label{dplyr}



    \section{Example analyses}
    \label{Example analyses}

        \subsection{Running scripts}
        \label{Running scripts}
        
        You can run \R{} scripts one of four ways. First, you can enter commands at the \R{} prompt using the interactive shell. This is an excellent way to explore your data and experiment with various \R{} functions, both built-in functions and user defined functions. Second, you can run \R{} scripts as stand alone programs. This tutorial does not cover stand alone \R{} programs, although this is not an advanced topic, and such programs are commonly used in research and industry. Third, you can run \R{} scripts via the \textit{knitr} package, which was covered in section \ref{knitr} on \pageref{knitr}. Finally, you can create a text file containing a series of \R{} commands, and instruct your \R{} console to execute the commands.

        Open a text editor and copy the following listing. Save the file in the same directory in which your \R{} is running as ``script01.R''. In our \R{} console, type this command: \texttt{source(``script01.R'')}. The commands you listed in your script will run. Why should you do this? If you have a series of commands that you need to execute repeatedly, or if you are working on building a script and you need to test it many times, this will allow you to automate your work flow.

        \begin{lstlisting}
print("This is script01.R")
data <- LakeHuron
print("LakeHuron data")
print(data)
sumy <- summary(LakeHuron)
print("summary of data")
print(sumy)
avg <- mean(LakeHuron)
print("mean of data")
print(avg)
med <- median(LakeHuron)
print("median of data")
print(med)
sd <- sd(LakeHuron)
print("standard deviation of data")
print(sd)
print("histogram of data")
hist(LakeHuron)
print("script01.R done")
        \end{lstlisting}
        
        This is what you will see when you do this.

        <<scropt01, cache=TRUE>>=
print("This is script01.R")
data <- LakeHuron
print("LakeHuron data")
print(data)
sumy <- summary(LakeHuron)
print("summary of data")
print(sumy)
avg <- mean(LakeHuron)
print("mean of data")
print(avg)
med <- median(LakeHuron)
print("median of data")
print(med)
sd <- sd(LakeHuron)
print("standard deviation of data")
print(sd)
print("histogram of data")
hist(LakeHuron)
print("script01.R done")
        @        

        \paragraph{Exercise:} \R{} has a number of built-in data sets for exploration and learning. Enter the command \texttt{?data} and read the documentation. Then, enter the command \texttt{data()},\footnote{Don't forget the parentheses after the word \textit{data}. The parentheses tell \R{} that you have called a function.} and review the available data sets. You will find the \textit{LakeHuron} dataset here. Choose one, and create your own script to print the dataset and a summary of the dataset.
    
        \subsection{Data entry}
        \label{Data entry}
        

        \subsection{Importing data}
        \label{Importing data}
        
